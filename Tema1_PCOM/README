Lemnaru Mihai - Daniel
322 CD

-Am creat o structura "packet" care retine informatii despre un pachet care urmeaza sa fie trimis mai departe.
-ip_address_to_int: primeste ca parametru un sir de caractere ce reprezinta o adresa IP si returneaza valoarea intreaga corespunzatoare acelei adrese IP in formatul Big Endian. Initializam variabila new_ip_address cu 0, aceasta va stoca adresa IP ca intreg. Parcurgem fiecare caracter din sirul de caractere al adresei IP data ca ca parametru, iar cand intalnim un "." inseamna ca am terminat de parcurs un octet din adresa. Mutam valoarea stocata in reprezentarea intreaga la stanga cu 8 biti pentru a face loc noului octet. Apoi folosind "OR" combinam valoarea octetului curent cu valoarea stocata anterior. In cazul in care caracterul curent este o cifra actualizam valoarea octetului. La final adaugam ultimul octet la adresa IP calculata.
-get_arp_table_entry: primeste ca parametri o adresa IP de cautat, tabela ARP, si lungimea tabelei si returneaza un pointer catre intrarea respectiva sau NULL altfel.
-binary_search: realizeaza o cautare binara in tabela de rutare pentru a gasi cea mai specifica ruta pentru o anumita adresa IP destinatie (o varianta mai eficienta decat cautarea liniara prin toata tabela de rutare -> O(logn)).
-best_route: returneaza un pointer catre cea mai specifica intrare din tabela de rutare care se potriveste cu adresa IP destinatie.
-send_icmp: construieste si trimite un pachet ICMP pe o anumita interfata. Extrage headerul Ethernet, IP si ICMP din bufferul de intrare. Copiaza continutul intregului pachet ICMP intr-un nou buffer. Copiaza adresa MAC sursa a pachetului Ethernet in adresa MAC destinatie. Obtine adresa MAC a interfetei si o pune ca adresa sursa in pachetul Ethernet. Actualizeaza lungimea totala a pachetului si campurile TTL, protocol is adresa sursa. Calculeaza checksum-ul pachetului IP. Seteaza tipul si codul ICMP si calculeaza checksum-ul pachetului ICMP. Copiaza pachetul ICMP inapoi in bufferul original si calculeaza lungimea totala a pachetului ICMP, transmitand-o pe interfata specificata.
-comparator: este folosit de "qsort" pentru a sorta intrarile din tabela de rutare in functie de masca de retea (descrescator) si prefixul retelei (crescator)
arp_reply: construieste si trimite un raspuns de tip ARP catre o adresa IP specificata. Se initializeaza un nou antet ARP si fiecare din campurile acestuia. Se copiaza adresa MAC a expeditorului si se converteste adresa IP a expeditorului in formatul retea. Se copiaza adresa MAC a destinatarului si se specifica adresa IP destinatar. Se initializeaza bufferul "buf" cu zerouri si se copiaza antetul Ethernet si antetul ARP in acest buffer. Se calculeaza lungimea totala a pachetului si se trimite pachetul ARP prin intermediul interfetei specificate.
main: -> Se initializeaza un buffer "buf" de dimensiune maxima a pachetului, o coada "queue", se aloca memorie pentru tabela ARP si tabela de rutare si se sorteaza tabela de rutare folosind functia qsort si comparatorul descris anterior.
      -> interface primeste un pachet de pe orice interfata si se salveaza in bufferul buf, iar lungimea pachetului este stocata in len. Se obtine adresa header-ului Ethernet din bufferul "buf". Se verifica daca tipul de protocul al pachetului Ethernet este de tip IP. 
      -> In caz afirmativ se obtine adresa header-ului IP din bufferul "buf", se salveaza valoarea checksum-ului IP vechi, se seteaza checksum-ul IP la 0 inainte de recalculare si apoi se verifica daca checksum-ul IP a fost alterat (daca este cazul se continua la urmatorul pachet). Se determina cea mai buna ruta pentru adresa IP de destinatie si se verifica daca nu s-a gasit nicio ruta pentru adresa IP de destinatie (in aceste caz se trimite un mesaj ICMP de destinatie inaccesibila si se continua cu urmatorul pachet). Se obine adresa IP a interfetei curente si se verifica daca adresa IP de destinatie este adresa IP a interfetei curente (in acest caz se trimite un mesaj ICMP de raspuns si se continua cu urmatorul pachet). Se verifica daca TTL-ul pachetului este mai mic sau egal cu 1, iar in caz afirmativ se trimite un mesaj ICMP de tipul TIME_EXCEEDED si se continua cu urmatorul pachet. Se decrementeaza TTL-ul pachetului si se recalculeaza checksum-ul IP. Se cauta in tabela ARP adresa MAC pentru urmatorul hop al pachetului si se verifica daca adresa MAC a urmatorului hop nu este disponibila in tabela ARP. Astfel se declara un nou header Ethernet pentru un pachet ARP. Se obtine adresa MAC a interfetei pentru pachetul ARP. Se seteaza adresa MAC de destinatie a pachetului ARP la broadcast. Se seteaza tipul protocolului Ethernet la ARP. Se trimite un pachet ARP cerere pentru a obtine adresa MAC a urmatorului hop. Se aloca memorie pentru un pachet nou care va fi copia pachetului curent. Se stocheaza interfata pachetului copiat. Se aloca memorie pentru bufferul pachetului copiat. Se copiaza continutul pachetului buf in alt buffer si se stocheaza lungimea pachetului, urmand ca pachetul copiat sa fie incarcat in coada. Se copiaza adresa MAC a urmatorului hop in campul de destinatie al header-ului Ethernet, se obtine adresa MAC a interfetei pe care trebuie trimis pachetul, iar pachetul reprezentat de bufferul "buf" si lungime "len" este trimis catre interfata corespunzatoare.
      -> Daca tipul de protocol al pachetului Ethernet este de tip ARP, iar pachetul este un ARP Request, acesta raspunde cu un ARP Reply. Se pregateste un nou pachet Ethernet cu adresa MAC sursa a interfetei curente, adresa MAC destinatie preluata din ARP Request si tipul de protocol ARP. Apoi se trimite acest pachet ARP Reply. Daca pachetul este un ARP Reply, acesta actualizeaza tabela ARP locala cu informatiile primite. Se extrag adresa IP si adresa MAC din ARP Reply si sunt stocate intr-o noua intrare a tabelei ARP. Apoi se trimit pachetele aflate in coada catre destinatie, utilizand adresa MAC obtinuta din ARP Reply pentru actualizarea headerului Ethernet al fiecarui pachet din coada.
